"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("util");
class Rewriter {
    constructor(config) {
        this.config = config;
    }
    rewrite(document) {
        return __awaiter(this, void 0, void 0, function* () {
            const variables = Object.keys(document);
            const result = {};
            for (const variable of variables) {
                const value = document[variable].value;
                result[variable] = yield this.rewriteValue(value);
            }
            return result;
        });
    }
    rewriteValue(value) {
        return __awaiter(this, void 0, void 0, function* () {
            if (typeof value === 'string') {
                let result = '';
                let capture = '';
                for (let i = 0; i < value.length; ++i) {
                    const c = value.charAt(i);
                    if (c === '$') {
                        capture += c;
                    }
                    else if (c == '}') {
                        capture += c;
                        const regex = new RegExp('\\${([\\w]+):(.*)}');
                        const matchResults = capture.match(regex);
                        if (matchResults) {
                            const resolverName = matchResults[1];
                            const resolver = this.getResolver(resolverName);
                            if (!resolver) {
                                throw new Error(`Could not locate resolver for value ${value}`);
                            }
                            const argument = matchResults ? matchResults[2] : value;
                            let resolved = yield resolver(argument, this.config);
                            const rewrittenValue = yield this.rewriteValue(resolved);
                            if (!util_1.isNullOrUndefined(rewrittenValue)) {
                                result += rewrittenValue;
                            }
                        }
                        else {
                            result += capture;
                        }
                        capture = '';
                    }
                    else if (capture) {
                        capture += c;
                    }
                    else {
                        result += c;
                    }
                }
                return result;
            }
            else {
                return value;
            }
        });
    }
    getResolver(name) {
        if (!name) {
            return this.config.resolvers['constant'];
        }
        return this.config.resolvers[name];
    }
}
exports.Rewriter = Rewriter;
//# sourceMappingURL=rewriter.js.map