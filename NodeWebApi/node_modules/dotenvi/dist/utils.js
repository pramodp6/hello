"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const os = require("os");
const types_1 = require("./types");
const resolvers_1 = require("./resolvers");
function writeFile(document, filename, format) {
    let output = '';
    if (format === 'dotenv') {
        const keys = Object.keys(document);
        for (const key of keys) {
            if (document[key] !== undefined) {
                output += `${key}=${document[key]}\n`;
            }
        }
    }
    else if (format === 'json') {
        output = JSON.stringify(document, undefined, 2) + os.EOL;
    }
    else {
        throw new Error(`Invalid output format specified ${format}`);
    }
    fs.writeFileSync(filename, output);
}
exports.writeFile = writeFile;
function validateOutput(input, output) {
    const errors = [];
    const keys = Object.keys(input);
    for (const key of keys) {
        if (!input[key].optional) {
            if (!(key in output) || output[key] === undefined || output[key] === '') {
                errors.push(`${key} is a required variable but is not specified in result`);
            }
        }
    }
    return errors;
}
exports.validateOutput = validateOutput;
function loadConfig() {
    let config = new types_1.Config();
    if (fs.existsSync(`./env.js`)) {
        console.info(`Loading configuration from ${process.cwd()}/env.js`);
        config = require(`${process.cwd()}/env`);
        if (!config.resolvers) {
            config.resolvers = {};
        }
    }
    config.resolvers = Object.assign({}, config.resolvers, resolvers_1.resolvers);
    return config;
}
exports.loadConfig = loadConfig;
function accessNestedObject(nestedObj, pathArr) {
    return pathArr.reduce((obj, key) => obj && obj[key] ? obj[key] : undefined, nestedObj);
}
exports.accessNestedObject = accessNestedObject;
function parseFormat(format) {
    if (format.toLowerCase() === "dotenv") {
        return 'dotenv';
    }
    else if (format.toLowerCase() === "json") {
        return 'json';
    }
    throw new Error(`Invalid format specified ${format}`);
}
exports.parseFormat = parseFormat;
//# sourceMappingURL=utils.js.map