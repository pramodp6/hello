#! /usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const path = require("path");
const argparse_1 = require("argparse");
const rewriter_1 = require("./rewriter");
const utils_1 = require("./utils");
const inputParser_1 = require("./inputParser");
const parser = new argparse_1.ArgumentParser();
parser.addArgument(['-s', '--stage'], {
    help: 'Environment stage',
    dest: 'stage'
});
parser.addArgument(['-f', '--file'], {
    help: 'Path to env.yml',
    dest: 'file',
    defaultValue: 'env.yml'
});
parser.addArgument(['-o', '--output-dir'], {
    help: 'Output directory',
    dest: 'outputdir',
    defaultValue: process.cwd()
});
parser.addArgument(['-t', '--output-format'], {
    help: 'Output format of file.  Options are json or dotenv',
    dest: 'outputformat',
    defaultValue: 'dotenv'
});
const args = parser.parseArgs();
const config = utils_1.loadConfig();
let document;
try {
    const contents = fs.readFileSync(args.file, 'utf8');
    document = inputParser_1.parse(contents, args.stage);
}
catch (error) {
    console.error(`Could not load yaml ${error.stack}`);
    process.exit(1);
}
const format = utils_1.parseFormat(args.outputformat);
const filename = path.join(args.outputdir, args.outputformat === 'dotenv' ? '.env' : 'dotenvi.json');
const rewriter = new rewriter_1.Rewriter(config);
rewriter
    .rewrite(document)
    .then(result => {
    const errors = utils_1.validateOutput(document, result);
    if (errors.length) {
        throw new Error(`Validation errors found in result:\n${errors.join('\n')}`);
    }
    console.info(`Writing output file to ${filename}`);
    utils_1.writeFile(result, filename, format);
})
    .catch((error) => {
    console.error(`Could not write output file: ${error.stack}`);
    process.exit(1);
});
//# sourceMappingURL=index.js.map